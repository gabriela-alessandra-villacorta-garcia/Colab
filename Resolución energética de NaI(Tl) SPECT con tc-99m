import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import norm
from scipy.optimize import curve_fit



# Energía del Tc-99m (keV)
E0 = 140.5  

# Actividad de la fuente (desintegración por segundo)
activity_Ci = 25e-6  # 25 μCi
activity_Bq = activity_Ci * 3.7e10  # 1 Ci = 3.7e10 Bq

# Tiempo de simulación (s)
t_sim = 1  

# Número total de fotones emitidos (Poisson)
N_photons = np.random.poisson(activity_Bq * t_sim)

# Eficiencia de detección (NaI(Tl) ~30% a 140 keV)
detection_efficiency = 0.3  

# Número de fotones detectados
N_detected = int(N_photons * detection_efficiency)
print(f"Fotones detectados: {N_detected}")


# Función para el espectro (Gaussiana + fondo Compton)
def spectrum(E, A, mu, sigma, B):
    gaussian = A * norm.pdf(E, mu, sigma)
    compton = B * np.exp(-E / 100)  # Modelo simplificado de dispersión Compton
    return gaussian + compton

# Rango de energías (keV)
E = np.linspace(50, 200, 500)

# Parámetros iniciales
A0 = N_detected * 0.8  # Amplitud del pico
mu0 = E0               # Media en 140.5 keV
sigma0 = E0 * 0.1 / 2.355  # FWHM = 2.355σ → σ = FWHM / 2.355
B0 = N_detected * 0.2  # Fondo Compton

# Generar datos sintéticos + ruido
ideal_spectrum = spectrum(E, A0, mu0, sigma0, B0)
noisy_spectrum = np.random.poisson(ideal_spectrum)  # Ruido Poisson

# Ajuste de curva para extraer FWHM
popt, _ = curve_fit(spectrum, E, noisy_spectrum, p0=[A0, mu0, sigma0, B0])
A_fit, mu_fit, sigma_fit, B_fit = popt
FWHM = 2.355 * sigma_fit
resolution_percent = (FWHM / mu_fit) * 100

print(f"Resolución energética (FWHM): {FWHM:.2f} keV ({resolution_percent:.1f}%)")


plt.figure(figsize=(10, 6))
plt.plot(E, noisy_spectrum, 'b-', label="Datos simulados")
plt.plot(E, spectrum(E, *popt), 'r--', label="Ajuste Gaussiano")
plt.axvline(x=E0, color='k', linestyle=':', label="140.5 keV")
plt.xlabel("Energía (keV)")
plt.ylabel("Cuentas")
plt.title("Espectro de Tc-99m en NaI(Tl)")
plt.legend()
plt.grid()
plt.show()
